//@version=6
indicator("TSLA M2 Std Dev (Hard Coded)", shorttitle="TSLA M2 Std Dev (Hard Coded)", overlay=true)

// Static arrays (2 decimal) UTC timestamps
var int[] dateArray = array.from(timestamp("GMT", 2024, 3, 20, 0, 0), timestamp("GMT", 2024, 3, 21, 0, 0), timestamp("GMT", 2024, 3, 22, 0, 0), timestamp("GMT", 2024, 3, 27, 0, 0), timestamp("GMT", 2024, 3, 28, 0, 0), timestamp("GMT", 2024, 4, 3, 0, 0), timestamp("GMT", 2024, 4, 4, 0, 0), timestamp("GMT", 2024, 4, 5, 0, 0), timestamp("GMT", 2024, 4, 9, 0, 0), timestamp("GMT", 2024, 4, 10, 0, 0), timestamp("GMT", 2024, 4, 11, 0, 0), timestamp("GMT", 2024, 4, 12, 0, 0), timestamp("GMT", 2024, 4, 17, 0, 0), timestamp("GMT", 2024, 4, 18, 0, 0), timestamp("GMT", 2024, 4, 19, 0, 0), timestamp("GMT", 2024, 4, 24, 0, 0), timestamp("GMT", 2024, 4, 25, 0, 0), timestamp("GMT", 2024, 4, 26, 0, 0), timestamp("GMT", 2024, 5, 1, 0, 0), timestamp("GMT", 2024, 5, 2, 0, 0), timestamp("GMT", 2024, 5, 3, 0, 0), timestamp("GMT", 2024, 5, 8, 0, 0), timestamp("GMT", 2024, 5, 9, 0, 0), timestamp("GMT", 2024, 5, 10, 0, 0), timestamp("GMT", 2024, 5, 15, 0, 0), timestamp("GMT", 2024, 5, 16, 0, 0), timestamp("GMT", 2024, 5, 17, 0, 0), timestamp("GMT", 2024, 5, 22, 0, 0), timestamp("GMT", 2024, 5, 23, 0, 0), timestamp("GMT", 2024, 5, 24, 0, 0), timestamp("GMT", 2024, 5, 29, 0, 0), timestamp("GMT", 2024, 5, 30, 0, 0), timestamp("GMT", 2024, 5, 31, 0, 0), timestamp("GMT", 2024, 6, 5, 0, 0), timestamp("GMT", 2024, 6, 6, 0, 0), timestamp("GMT", 2024, 6, 7, 0, 0), timestamp("GMT", 2024, 6, 12, 0, 0), timestamp("GMT", 2024, 6, 13, 0, 0), timestamp("GMT", 2024, 6, 14, 0, 0), timestamp("GMT", 2024, 6, 20, 0, 0), timestamp("GMT", 2024, 6, 21, 0, 0), timestamp("GMT", 2024, 6, 26, 0, 0), timestamp("GMT", 2024, 6, 27, 0, 0), timestamp("GMT", 2024, 6, 28, 0, 0), timestamp("GMT", 2024, 7, 3, 0, 0), timestamp("GMT", 2024, 7, 5, 0, 0), timestamp("GMT", 2024, 7, 9, 0, 0), timestamp("GMT", 2024, 7, 10, 0, 0), timestamp("GMT", 2024, 7, 11, 0, 0), timestamp("GMT", 2024, 7, 12, 0, 0), timestamp("GMT", 2024, 7, 17, 0, 0), timestamp("GMT", 2024, 7, 18, 0, 0), timestamp("GMT", 2024, 7, 19, 0, 0), timestamp("GMT", 2024, 7, 24, 0, 0), timestamp("GMT", 2024, 7, 25, 0, 0), timestamp("GMT", 2024, 7, 26, 0, 0), timestamp("GMT", 2024, 7, 31, 0, 0), timestamp("GMT", 2024, 8, 1, 0, 0), timestamp("GMT", 2024, 8, 2, 0, 0), timestamp("GMT", 2024, 8, 7, 0, 0), timestamp("GMT", 2024, 8, 8, 0, 0), timestamp("GMT", 2024, 8, 9, 0, 0), timestamp("GMT", 2024, 8, 14, 0, 0), timestamp("GMT", 2024, 8, 15, 0, 0), timestamp("GMT", 2024, 8, 16, 0, 0), timestamp("GMT", 2024, 8, 21, 0, 0), timestamp("GMT", 2024, 8, 22, 0, 0), timestamp("GMT", 2024, 8, 23, 0, 0), timestamp("GMT", 2024, 8, 28, 0, 0), timestamp("GMT", 2024, 8, 29, 0, 0), timestamp("GMT", 2024, 8, 30, 0, 0), timestamp("GMT", 2024, 9, 4, 0, 0), timestamp("GMT", 2024, 9, 5, 0, 0), timestamp("GMT", 2024, 9, 6, 0, 0), timestamp("GMT", 2024, 9, 9, 0, 0), timestamp("GMT", 2024, 9, 11, 0, 0), timestamp("GMT", 2024, 9, 12, 0, 0), timestamp("GMT", 2024, 9, 13, 0, 0), timestamp("GMT", 2024, 9, 18, 0, 0), timestamp("GMT", 2024, 9, 19, 0, 0), timestamp("GMT", 2024, 9, 20, 0, 0), timestamp("GMT", 2024, 9, 25, 0, 0), timestamp("GMT", 2024, 9, 26, 0, 0), timestamp("GMT", 2024, 9, 27, 0, 0), timestamp("GMT", 2024, 10, 2, 0, 0), timestamp("GMT", 2024, 10, 3, 0, 0), timestamp("GMT", 2024, 10, 4, 0, 0), timestamp("GMT", 2024, 10, 8, 0, 0), timestamp("GMT", 2024, 10, 9, 0, 0), timestamp("GMT", 2024, 10, 10, 0, 0), timestamp("GMT", 2024, 10, 11, 0, 0), timestamp("GMT", 2024, 10, 16, 0, 0), timestamp("GMT", 2024, 10, 17, 0, 0), timestamp("GMT", 2024, 10, 18, 0, 0), timestamp("GMT", 2024, 10, 23, 0, 0), timestamp("GMT", 2024, 10, 24, 0, 0), timestamp("GMT", 2024, 10, 25, 0, 0), timestamp("GMT", 2024, 10, 30, 0, 0), timestamp("GMT", 2024, 10, 31, 0, 0), timestamp("GMT", 2024, 11, 1, 0, 0), timestamp("GMT", 2024, 11, 6, 0, 0), timestamp("GMT", 2024, 11, 7, 0, 0), timestamp("GMT", 2024, 11, 8, 0, 0), timestamp("GMT", 2024, 11, 13, 0, 0), timestamp("GMT", 2024, 11, 14, 0, 0), timestamp("GMT", 2024, 11, 15, 0, 0), timestamp("GMT", 2024, 11, 20, 0, 0), timestamp("GMT", 2024, 11, 21, 0, 0), timestamp("GMT", 2024, 11, 22, 0, 0), timestamp("GMT", 2024, 11, 27, 0, 0), timestamp("GMT", 2024, 11, 29, 0, 0), timestamp("GMT", 2024, 12, 4, 0, 0), timestamp("GMT", 2024, 12, 5, 0, 0), timestamp("GMT", 2024, 12, 6, 0, 0), timestamp("GMT", 2024, 12, 9, 0, 0), timestamp("GMT", 2024, 12, 10, 0, 0), timestamp("GMT", 2024, 12, 11, 0, 0), timestamp("GMT", 2024, 12, 12, 0, 0), timestamp("GMT", 2024, 12, 13, 0, 0), timestamp("GMT", 2024, 12, 18, 0, 0), timestamp("GMT", 2024, 12, 19, 0, 0), timestamp("GMT", 2024, 12, 20, 0, 0), timestamp("GMT", 2024, 12, 26, 0, 0), timestamp("GMT", 2024, 12, 27, 0, 0), timestamp("GMT", 2025, 1, 2, 0, 0), timestamp("GMT", 2025, 1, 3, 0, 0), timestamp("GMT", 2025, 1, 8, 0, 0), timestamp("GMT", 2025, 1, 10, 0, 0), timestamp("GMT", 2025, 1, 15, 0, 0), timestamp("GMT", 2025, 1, 16, 0, 0), timestamp("GMT", 2025, 1, 17, 0, 0), timestamp("GMT", 2025, 1, 22, 0, 0), timestamp("GMT", 2025, 1, 23, 0, 0), timestamp("GMT", 2025, 1, 24, 0, 0), timestamp("GMT", 2025, 1, 29, 0, 0), timestamp("GMT", 2025, 1, 30, 0, 0), timestamp("GMT", 2025, 1, 31, 0, 0), timestamp("GMT", 2025, 2, 5, 0, 0), timestamp("GMT", 2025, 2, 6, 0, 0), timestamp("GMT", 2025, 2, 7, 0, 0), timestamp("GMT", 2025, 2, 12, 0, 0), timestamp("GMT", 2025, 2, 13, 0, 0), timestamp("GMT", 2025, 2, 14, 0, 0), timestamp("GMT", 2025, 2, 19, 0, 0), timestamp("GMT", 2025, 2, 20, 0, 0), timestamp("GMT", 2025, 2, 21, 0, 0), timestamp("GMT", 2025, 2, 26, 0, 0), timestamp("GMT", 2025, 2, 27, 0, 0), timestamp("GMT", 2025, 2, 28, 0, 0), timestamp("GMT", 2025, 3, 5, 0, 0), timestamp("GMT", 2025, 3, 6, 0, 0), timestamp("GMT", 2025, 3, 7, 0, 0), timestamp("GMT", 2025, 3, 10, 0, 0), timestamp("GMT", 2025, 3, 11, 0, 0), timestamp("GMT", 2025, 3, 12, 0, 0), timestamp("GMT", 2025, 3, 13, 0, 0), timestamp("GMT", 2025, 3, 14, 0, 0), timestamp("GMT", 2025, 3, 19, 0, 0), timestamp("GMT", 2025, 3, 20, 0, 0), timestamp("GMT", 2025, 3, 21, 0, 0), timestamp("GMT", 2025, 3, 26, 0, 0), timestamp("GMT", 2025, 3, 27, 0, 0), timestamp("GMT", 2025, 3, 28, 0, 0), timestamp("GMT", 2025, 4, 2, 0, 0), timestamp("GMT", 2025, 4, 3, 0, 0), timestamp("GMT", 2025, 4, 4, 0, 0), timestamp("GMT", 2025, 4, 9, 0, 0), timestamp("GMT", 2025, 4, 10, 0, 0), timestamp("GMT", 2025, 4, 11, 0, 0), timestamp("GMT", 2025, 4, 16, 0, 0), timestamp("GMT", 2025, 4, 17, 0, 0), timestamp("GMT", 2025, 4, 23, 0, 0), timestamp("GMT", 2025, 4, 24, 0, 0), timestamp("GMT", 2025, 4, 25, 0, 0), timestamp("GMT", 2025, 4, 30, 0, 0), timestamp("GMT", 2025, 5, 1, 0, 0), timestamp("GMT", 2025, 5, 2, 0, 0), timestamp("GMT", 2025, 5, 7, 0, 0), timestamp("GMT", 2025, 5, 8, 0, 0), timestamp("GMT", 2025, 5, 9, 0, 0), timestamp("GMT", 2025, 5, 12, 0, 0), timestamp("GMT", 2025, 5, 14, 0, 0), timestamp("GMT", 2025, 5, 15, 0, 0), timestamp("GMT", 2025, 5, 16, 0, 0), timestamp("GMT", 2025, 5, 21, 0, 0), timestamp("GMT", 2025, 5, 22, 0, 0), timestamp("GMT", 2025, 5, 23, 0, 0), timestamp("GMT", 2025, 5, 28, 0, 0), timestamp("GMT", 2025, 5, 29, 0, 0), timestamp("GMT", 2025, 5, 30, 0, 0), timestamp("GMT", 2025, 6, 4, 0, 0), timestamp("GMT", 2025, 6, 5, 0, 0), timestamp("GMT", 2025, 6, 6, 0, 0), timestamp("GMT", 2025, 6, 9, 0, 0), timestamp("GMT", 2025, 6, 11, 0, 0), timestamp("GMT", 2025, 6, 12, 0, 0), timestamp("GMT", 2025, 6, 13, 0, 0), timestamp("GMT", 2025, 6, 18, 0, 0), timestamp("GMT", 2025, 6, 20, 0, 0), timestamp("GMT", 2025, 6, 25, 0, 0))
var float[] m2Array  = array.from(74.75, 78.95, 93.62, 108.53, 112.22, 115.81, 116.69, 124.80, 146.44, 155.62, 126.15, 119.80, 119.16, 112.56, 111.73, 109.73, 93.98, 90.87, 92.46, 94.81, 105.56, 93.47, 95.57, 129.79, 113.04, 118.96, 119.00, 116.29, 107.38, 108.90, 112.83, 117.61, 118.31, 117.96, 117.85, 116.81, 133.99, 136.16, 140.94, 153.48, 153.27, 139.43, 134.17, 138.23, 126.62, 121.60, 159.89, 153.51, 155.32, 160.56, 162.91, 162.97, 149.07, 134.78, 133.25, 138.03, 132.38, 136.93, 135.70, 138.31, 110.04, 125.36, 140.59, 134.09, 129.19, 129.35, 131.43, 145.30, 135.87, 134.94, 130.28, 132.34, 131.50, 124.31, 140.22, 148.07, 149.55, 143.70, 133.11, 129.33, 140.22, 126.53, 127.20, 126.06, 120.71, 118.26, 111.49, 138.66, 140.82, 140.89, 144.42, 150.94, 147.54, 148.09, 167.42, 164.62, 175.58, 165.31, 165.32, 172.15, 170.42, 175.23, 178.75, 232.17, 220.27, 207.80, 208.67, 221.54, 226.12, 234.99, 246.89, 254.65, 258.23, 250.87, 263.29, 267.45, 259.80, 260.35, 271.39, 267.84, 266.99, 266.62, 283.15, 287.95, 306.76, 298.21, 341.67, 322.07, 315.33, 303.40, 291.20, 285.20, 275.99, 271.84, 265.23, 261.78, 255.00, 256.44, 255.89, 262.38, 279.76, 284.70, 238.45, 226.12, 213.17, 208.01, 209.20, 208.43, 200.27, 200.42, 198.99, 213.20, 242.07, 242.92, 227.99, 225.02, 229.54, 232.58, 231.96, 225.04, 214.28, 214.71, 198.38, 192.71, 192.87, 191.85, 193.42, 202.95, 206.23, 201.73, 195.19, 183.82, 187.75, 190.63, 211.70, 221.44, 216.70, 237.11, 229.18, 229.24, 262.74, 263.63, 267.73, 268.16, 251.19, 254.42, 250.60, 281.58, 272.55, 270.61, 289.67, 294.31, 289.77, 287.34, 299.87, 316.54, 336.99, 342.41, 351.16, 352.77)
var float[] m1Array  = array.from(114.32, 118.52, 133.19, 148.10, 151.79, 155.38, 156.26, 164.37, 186.01, 195.19, 165.72, 159.37, 158.73, 152.12, 151.30, 149.30, 133.55, 130.44, 132.02, 134.38, 145.13, 133.04, 135.14, 169.36, 152.61, 158.53, 158.57, 155.86, 146.95, 148.47, 152.40, 157.18, 157.88, 157.53, 157.42, 156.38, 173.56, 175.73, 180.51, 193.05, 192.84, 178.99, 173.74, 177.80, 166.19, 161.17, 199.46, 193.08, 194.89, 200.13, 202.48, 202.54, 188.64, 174.35, 172.82, 177.60, 171.95, 176.50, 175.26, 177.88, 149.61, 164.93, 180.16, 173.66, 168.76, 168.92, 171.00, 184.87, 175.44, 174.51, 169.85, 171.91, 171.07, 163.88, 179.79, 187.64, 189.12, 183.27, 172.67, 168.90, 179.79, 166.10, 166.77, 165.63, 160.28, 157.83, 151.06, 178.23, 180.39, 180.46, 183.99, 190.51, 187.11, 187.66, 206.99, 204.19, 215.15, 204.88, 204.89, 211.72, 209.99, 214.80, 218.32, 271.74, 259.84, 247.37, 248.24, 261.11, 265.69, 274.56, 286.46, 294.22, 297.80, 290.44, 302.85, 307.02, 299.37, 299.92, 310.96, 307.41, 306.56, 306.19, 322.72, 327.52, 346.33, 337.78, 381.24, 361.64, 354.90, 342.97, 330.77, 324.77, 315.56, 311.41, 304.80, 301.35, 294.57, 296.01, 295.46, 301.95, 319.33, 324.27, 278.01, 265.69, 252.74, 247.58, 248.77, 248.00, 239.84, 239.99, 238.56, 252.77, 281.64, 282.49, 267.56, 264.59, 269.11, 272.15, 271.53, 264.61, 253.85, 254.28, 237.95, 232.28, 232.44, 231.42, 232.99, 242.52, 245.80, 241.30, 234.76, 223.39, 227.31, 230.20, 251.27, 261.01, 256.27, 276.68, 268.75, 268.81, 302.31, 303.20, 307.30, 307.73, 290.76, 293.99, 290.17, 321.14, 312.12, 310.18, 329.24, 333.88, 329.34, 326.90, 339.44, 356.11, 376.56, 381.98, 390.73, 392.34)
var float[] fvArray  = array.from(153.89, 158.09, 172.76, 187.67, 191.36, 194.95, 195.83, 203.94, 225.58, 234.76, 205.29, 198.94, 198.30, 191.69, 190.87, 188.87, 173.12, 170.01, 171.59, 173.95, 184.70, 172.60, 174.71, 208.93, 192.18, 198.10, 198.14, 195.43, 186.52, 188.04, 191.97, 196.75, 197.45, 197.10, 196.99, 195.95, 213.13, 215.30, 220.08, 232.62, 232.41, 218.56, 213.31, 217.37, 205.76, 200.74, 239.03, 232.65, 234.46, 239.70, 242.05, 242.11, 228.21, 213.92, 212.39, 217.17, 211.52, 216.07, 214.83, 217.45, 189.18, 204.50, 219.73, 213.23, 208.33, 208.49, 210.57, 224.44, 215.01, 214.08, 209.42, 211.48, 210.64, 203.45, 219.36, 227.21, 228.69, 222.84, 212.24, 208.47, 219.36, 205.67, 206.34, 205.20, 199.85, 197.40, 190.63, 217.80, 219.96, 220.02, 223.56, 230.07, 226.68, 227.23, 246.56, 243.76, 254.72, 244.45, 244.46, 251.29, 249.56, 254.37, 257.89, 311.31, 299.41, 286.94, 287.81, 300.68, 305.26, 314.13, 326.03, 333.79, 337.37, 330.01, 342.42, 346.59, 338.94, 339.49, 350.53, 346.98, 346.13, 345.76, 362.29, 367.09, 385.90, 377.35, 420.81, 401.21, 394.46, 382.54, 370.34, 364.34, 355.13, 350.98, 344.37, 340.92, 334.14, 335.58, 335.03, 341.52, 358.89, 363.84, 317.58, 305.26, 292.31, 287.15, 288.33, 287.57, 279.41, 279.56, 278.13, 292.34, 321.21, 322.06, 307.13, 304.16, 308.68, 311.72, 311.10, 304.18, 293.42, 293.85, 277.52, 271.84, 272.01, 270.99, 272.56, 282.09, 285.37, 280.87, 274.33, 262.96, 266.88, 269.77, 290.84, 300.58, 295.84, 316.25, 308.31, 308.38, 341.88, 342.77, 346.87, 347.30, 330.33, 333.56, 329.74, 360.71, 351.69, 349.75, 368.81, 373.45, 368.91, 366.47, 379.01, 395.68, 416.13, 421.55, 430.30, 431.91)
var float[] p1Array  = array.from(193.46, 197.66, 212.33, 227.24, 230.93, 234.51, 235.40, 243.51, 265.15, 274.33, 244.86, 238.51, 237.87, 231.26, 230.44, 228.44, 212.69, 209.58, 211.16, 213.51, 224.27, 212.17, 214.28, 248.50, 231.75, 237.67, 237.71, 235.00, 226.09, 227.61, 231.54, 236.32, 237.02, 236.66, 236.56, 235.52, 252.69, 254.87, 259.65, 272.19, 271.98, 258.13, 252.88, 256.94, 245.33, 240.31, 278.60, 272.22, 274.03, 279.27, 281.62, 281.68, 267.78, 253.49, 251.96, 256.74, 251.09, 255.64, 254.40, 257.02, 228.75, 244.07, 259.30, 252.80, 247.90, 248.06, 250.14, 264.01, 254.58, 253.65, 248.99, 251.05, 250.21, 243.02, 258.93, 266.78, 268.26, 262.41, 251.81, 248.04, 258.93, 245.24, 245.91, 244.77, 239.42, 236.97, 230.20, 257.37, 259.53, 259.59, 263.13, 269.64, 266.24, 266.80, 286.13, 283.33, 294.29, 284.02, 284.03, 290.86, 289.13, 293.94, 297.46, 350.88, 338.98, 326.51, 327.38, 340.25, 344.83, 353.70, 365.60, 373.36, 376.94, 369.58, 381.99, 386.16, 378.51, 379.06, 390.10, 386.55, 385.69, 385.33, 401.86, 406.66, 425.47, 416.92, 460.38, 440.78, 434.03, 422.11, 409.91, 403.91, 394.70, 390.55, 383.94, 380.49, 373.71, 375.15, 374.60, 381.09, 398.46, 403.41, 357.15, 344.82, 331.88, 326.72, 327.90, 327.14, 318.98, 319.13, 317.70, 331.91, 360.78, 361.63, 346.70, 343.73, 348.25, 351.29, 350.67, 343.75, 332.99, 333.42, 317.09, 311.41, 311.58, 310.56, 312.13, 321.66, 324.94, 320.44, 313.89, 302.53, 306.45, 309.34, 330.41, 340.15, 335.41, 355.82, 347.88, 347.95, 381.45, 382.34, 386.44, 386.87, 369.89, 373.13, 369.31, 400.28, 391.26, 389.31, 408.38, 413.02, 408.48, 406.04, 418.58, 435.25, 455.70, 461.12, 469.87, 471.48)
var float[] p2Array  = array.from(233.03, 237.23, 251.90, 266.81, 270.50, 274.08, 274.97, 283.08, 304.72, 313.90, 284.43, 278.08, 277.44, 270.83, 270.01, 268.01, 252.26, 249.15, 250.73, 253.08, 263.84, 251.74, 253.85, 288.07, 271.32, 277.23, 277.28, 274.57, 265.66, 267.18, 271.11, 275.89, 276.59, 276.23, 276.13, 275.09, 292.26, 294.44, 299.22, 311.76, 311.55, 297.70, 292.45, 296.51, 284.90, 279.88, 318.17, 311.79, 313.59, 318.84, 321.19, 321.25, 307.35, 293.06, 291.53, 296.31, 290.66, 295.21, 293.97, 296.59, 268.31, 283.64, 298.87, 292.37, 287.47, 287.63, 289.71, 303.58, 294.15, 293.22, 288.56, 290.62, 289.78, 282.59, 298.50, 306.35, 307.83, 301.98, 291.38, 287.61, 298.50, 284.80, 285.47, 284.34, 278.99, 276.54, 269.77, 296.94, 299.10, 299.16, 302.70, 309.21, 305.81, 306.37, 325.70, 322.90, 333.86, 323.59, 323.60, 330.43, 328.70, 333.51, 337.03, 390.45, 378.55, 366.08, 366.95, 379.82, 384.40, 393.27, 405.17, 412.93, 416.51, 409.15, 421.56, 425.73, 418.08, 418.63, 429.67, 426.12, 425.26, 424.90, 441.43, 446.23, 465.04, 456.49, 499.95, 480.35, 473.60, 461.68, 449.48, 443.48, 434.27, 430.11, 423.51, 420.06, 413.28, 414.72, 414.17, 420.66, 438.03, 442.98, 396.72, 384.39, 371.45, 366.29, 367.47, 366.71, 358.55, 358.70, 357.27, 371.48, 400.35, 401.20, 386.27, 383.30, 387.82, 390.86, 390.24, 383.32, 372.56, 372.99, 356.66, 350.98, 351.15, 350.13, 351.70, 361.23, 364.51, 360.01, 353.46, 342.10, 346.02, 348.91, 369.98, 379.72, 374.98, 395.39, 387.45, 387.52, 421.02, 421.91, 426.01, 426.44, 409.46, 412.70, 408.88, 439.85, 430.83, 428.88, 447.95, 452.58, 448.05, 445.61, 458.15, 474.82, 495.27, 500.68, 509.44, 511.05)

// Today's daily timestamp (UTC)
dailyTime = time("D")

// Lookup function: forward-fill last past value
getValue(_dates, _values) =>
    var float res = na
    for i = 0 to array.size(_dates) - 1
        if array.get(_dates, i) <= dailyTime
            res := array.get(_values, i)
    res

// Retrieve base bands
bandP2 = getValue(dateArray, p2Array)
bandP1 = getValue(dateArray, p1Array)
bandFV = getValue(dateArray, fvArray)
bandM1 = getValue(dateArray, m1Array)
bandM2 = getValue(dateArray, m2Array)

// Compute 1σ magnitude
sigma = bandP1 - bandFV

// Compute ±3 SD bands
bandP3 = bandFV + 3 * sigma
bandM3 = bandFV - 3 * sigma

// Plot bands
baseCol = #009AFF
p3p = plot(bandP3, title="+3 SD", color=color.new(baseCol, 85), linewidth=2)
p2p = plot(bandP2, title="+2 SD", color=color.new(baseCol, 65), linewidth=2)
p1p = plot(bandP1, title="+1 SD", color=color.new(baseCol, 45), linewidth=2)
fvp = plot(bandFV, title="Fair Value", color=color.new(baseCol, 5),  linewidth=2)
m1p = plot(bandM1, title="-1 SD", color=color.new(baseCol, 45), linewidth=2)
m2p = plot(bandM2, title="-2 SD", color=color.new(baseCol, 65), linewidth=2)
m3p = plot(bandM3, title="-3 SD", color=color.new(baseCol, 85), linewidth=2)

// Shaded fills (forward-fill gaps show horizontal lines)
fill(p3p, p2p, color=color.new(baseCol, 90), title="+2 to +3 SD")
fill(p2p, p1p, color=color.new(baseCol, 75), title="+1 to +2 SD")
fill(p1p, fvp, color=color.new(baseCol, 60), title="+1 SD to Fair Value")
fill(fvp, m1p, color=color.new(baseCol, 60), title="Fair Value to -1 SD")
fill(m1p, m2p, color=color.new(baseCol, 75), title="-1 to -2 SD")
fill(m2p, m3p, color=color.new(baseCol, 90), title="-2 to -3 SD")
